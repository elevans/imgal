name: Release Python Wheels (imgal_python)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "If true, build all wheels but do NOT upload to PyPI."
        required: false
        default: "false"
        type: choice
        options: ["false","true"]

env:
  # Path to the Rust crate that provides the Python extension (adjust if needed)
  PYTHON_CRATE_PATH: ../../imgal_python
  # List of Python interpreters for the manylinux container build
  PY_VERSIONS_CLI: "-i python3.9 -i python3.10 -i python3.11 -i python3.12 -i python3.13"
  DRY_RUN: ${{ inputs.dry_run }}

permissions:
  contents: read

jobs:
  linux-wheels:
    name: Linux Wheels (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for aarch64)
        if: matrix.target == 'aarch64'
        uses: docker/setup-qemu-action@v3

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            linux-${{ matrix.target }}-cargo-

      - name: Build wheels (manylinux)
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: "2_28"
          command: build
          args: >-
            --release
            --out dist
            -m ${{ env.PYTHON_CRATE_PATH }}/Cargo.toml
            ${{ env.PY_VERSIONS_CLI }}
            --sdist

      - name: List built files
        run: ls -1 dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist/*

  macos-wheels:
    name: macOS Wheels (${{ matrix.runner_label }} py${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        runner_label: [macos-13, macos-14]   # macos-13 = Intel, macos-14 = Apple Silicon
        python-version: ["3.9","3.10","3.11","3.12","3.13"]
    runs-on: ${{ matrix.runner_label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: macos-${{ matrix.runner_label }}-py${{ matrix.python-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-${{ matrix.runner_label }}-py${{ matrix.python-version }}-cargo-
      - name: Install maturin
        run: pip install --upgrade maturin
      - name: Build macOS wheel
        run: >
          maturin build
          --release
          --out dist
          -m ${{ env.PYTHON_CRATE_PATH }}/Cargo.toml
          --interpreter python${{ matrix.python-version }}
      - name: List built files
        run: ls -1 dist
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.runner_label }}-py${{ matrix.python-version }}
          path: dist/*

  windows-wheels:
    name: Windows Wheels (py${{ matrix.python-version }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9","3.10","3.11","3.12","3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.cargo\registry
            C:\Users\runneradmin\.cargo\git
            target
          key: windows-py${{ matrix.python-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-py${{ matrix.python-version }}-cargo-
      - name: Install maturin
        run: pip install --upgrade maturin
      - name: Build Windows wheel
        shell: bash
        run: >
          maturin build
          --release
          --out dist
          -m ${{ env.PYTHON_CRATE_PATH }}/Cargo.toml
          --interpreter python${{ matrix.python-version }}
      - name: List built files
        shell: bash
        run: ls -1 dist
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: dist/*

  publish:
    name: Publish to PyPI
    needs:
      - linux-wheels
      - macos-wheels
      - windows-wheels
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Extract version from Cargo.toml (for logging)
        run: |
          ver=$(grep -E '^version\s*=' ${PYTHON_CRATE_PATH}/Cargo.toml | head -1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          echo "Detected package version: $ver"
          echo "PACKAGE_VERSION=$ver" >> $GITHUB_ENV

      - name: List collected files
        run: ls -1 dist

      - name: Basic wheel presence check
        run: |
          python - <<'EOF'
import glob
w=glob.glob("dist/*.whl")
print("Found wheels:", len(w))
assert w, "No wheels found!"
EOF

      - name: Dry run notice
        if: env.DRY_RUN == 'true'
        run: echo "Dry run selected: skipping PyPI upload."

      - name: Publish to PyPI
        if: env.DRY_RUN == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
